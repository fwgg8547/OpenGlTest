package com.fwgg8547.opentest;

import java.util.List;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.ScheduledFuture;

import android.content.*;
import android.opengl.GLSurfaceView;
import java.util.*;

public class GLEngine 
{
	private static final String TAG = "GLEngine";
	private static final long FRAME_RATE = 10;
	private static final long FRATE_PRIOD_MS = 1000/FRAME_RATE;
	private static final int MAX_OBJECT = 10;		
	
	private Context mContext;
	private GLController mController;
	private List<SpriteModel> mModelList;
	private ModelGroup mModelGroup;
	private GlSurf mSurfaceView;
	private PriodWork mPriodWork;
	private ScheduledExecutorService mSchedular;
	private ScheduledFuture<?> mFuture;
	
	private class PriodWork implements Runnable
	{
		private boolean mIsFirst = true;
		
		@Override
		public void run()
		{
			onUpdate(mIsFirst);
			mIsFirst = false;
		}
	}
	
	public GLEngine(Context ctx) 
	{
		mContext = ctx;
		
	}

	public void initialize()
	{
		createModels();
		createController();
		createSurfaceView();
		
		mSchedular = Executors.newSingleThreadScheduledExecutor();
		mPriodWork = new PriodWork();
		
	}
	
	public void finalize(){
		mSchedular.shutdownNow();
	}

	public GLSurfaceView getSurfaceView() 
	{
		return mSurfaceView;
	}

	public void start() {
		mFuture = mSchedular.scheduleAtFixedRate(mPriodWork, 0, FRATE_PRIOD_MS, TimeUnit.MILLISECONDS);
	}
	
	public void stop() {
		if(mFuture != null){
			mFuture.cancel(true);
		}
	}
	
	private void onUpdate(boolean isFirst){
		updateModel();
		updateControl();
	}
	
	private void updateModel(){
		Iterator it = mModelList.iterator();
		while(it.hasNext()){
			SpriteModel m = (SpriteModel)it.next();
			m.onUpdate();
		}
	}
	
	private void updateControl(){
		mController.onUpdate();
	}
	
	private void createModels()
	{
		mModelList = new ArrayList<SpriteModel>();
		mModelGroup = new ModelGroup();
		
		
		
		SpriteModel bm = BlockModel.getInstance();
		bm.initialize(MAX_OBJECT, mModelGroup);
		mModelList.add(bm);
		
		bm = BlockModel2.getInstance();
		bm.initialize(MAX_OBJECT, mModelGroup);
		mModelList.add(bm);
	}

	private void createController()
	{
		mController = new GLController(mContext);
		mController.addModelList(mModelList);
		mController.addModelGroup(mModelGroup);
		/*
		mController.addModel(mModels);
		mController.addModel(mModels2);
		*/
	}

	private void createSurfaceView()
	{
		mSurfaceView = new GlSurf(mContext);
		mSurfaceView.setCallback(mController);
	}

}
