package com.fwgg8547.opentest;

import java.util.List;
import java.util.ArrayList;
import android.view.MotionEvent;
import android.graphics.*;
import java.util.*;
import android.content.*;
import android.view.*;
import android.view.GestureDetector.*;

public class GLController implements GlSurf.Callback, ScreenModel.Callback
{
	private final static String TAG = "GLController";
	private List<SpriteModel> mModels;
	private ModelGroup mGroup;
	private TreeManager mTree;
	private boolean mIsDrag = false;
	private List<Item> mDragItem;
	private Context mContext;
	private GestureDetector mGestureDetector;

	public class GestureListener extends GestureDetector.SimpleOnGestureListener {
		public GestureListener(){
			
		}

		@Override
		public boolean onDown(MotionEvent event)
		{
			Lg.i(TAG,"onDown");
			RectF screen = ScreenModel.getInstance().getScreenInfo();
			float tx = event.getX() ;
			float ty = screen.height() - event.getY();
			
			mDragItem = mTree.getCollisionList(TreeManager.MAX_LEVEL, tx, ty);
			Lg.i(TAG, "cl " + mDragItem.size());
			if(mDragItem.size() > 0){
				mIsDrag = true;
			}

			/*
			 Iterator it = mModels.iterator();
			 while(it.hasNext()){
			 SpriteModel m = (SpriteModel)it.next();
			 if(m.conflict(tx, ty))
			 {
			 Lg.i(TAG, "hit");
			 int index = m.getIndexOfConflict();
			 }
			 }
			 */
			 
			return false;
		}

		@Override
		public boolean onFling(MotionEvent event1, MotionEvent event2, float vx, float vy)
		{
			Lg.i(TAG,"onFling " + vy);
			RectF screen = ScreenModel.getInstance().getScreenInfo();
			float ty1 = screen.height() - event1.getY();
			float ty2 = screen.height() - event2.getY();
			
			Iterator it = mGroup.iterator();
			while(it.hasNext()){
				Item itm = (Item)it.next();
				//Lg.i(TAG, "id " +itm.mId +" " +itm.getSpriteId());
				Item.MoveParam mp = itm.getPosition();
				itm.setAnimParam(
					mp.mx, mp.my, mp.mr, mp.mdeg, // start
					mp.mx, mp.my, mp.mr, 360*10, // end
					vy // verocity
					);
			}
			
			
			return false;
		}

		@Override
		public boolean onSingleTapUp(MotionEvent p1)
		{
			//Lg.i(TAG, "onSingleTapUp");
			return false;
		}

		@Override
		public boolean onSingleTapConfirmed(MotionEvent e)
		{
			Lg.i(TAG, "onSingleTapConfirm");
			return super.onSingleTapConfirmed(e);
		}

		@Override
		public boolean onDoubleTapEvent(MotionEvent e)
		{
			// TODO: Implement this method
			//Lg.i(TAG, "onDoubleTapEvent");
			return super.onDoubleTapEvent(e);
		}

		@Override
		public boolean onDoubleTap(MotionEvent e)
		{
			// TODO: Implement this method
			Lg.i(TAG, "onDouleTap");
			return super.onDoubleTap(e);
		}

		@Override
		public void onLongPress(MotionEvent p1)
		{
			Lg.i(TAG,"onLongPress");
		}

		@Override
		public boolean onScroll(MotionEvent event1, MotionEvent event2, float dx, float dy)
		{
			//Lg.i(TAG, "onScroll " + p1.getY() + " ; " + p2.getY());
			RectF screen = ScreenModel.getInstance().getScreenInfo();
			float tx = event2.getX();
			float ty = screen.height() - event2.getY();
			
			if(mIsDrag){
				Iterator it = mDragItem.iterator();
				while(it.hasNext()){
					Item itm = (Item)it.next();
					//Lg.i(TAG, "id " +itm.mId +" " +itm.getSpriteId());
					//itm.moveSingle(tx, ty);
					itm.moveRoll(tx,ty);
				}
			}

			if(dy >= 0){
				float deg = dy/10;
				Iterator it = mGroup.iterator();
				while(it.hasNext()){
					Item itm = (Item)it.next();
					//Lg.i(TAG, "id " +itm.mId +" " +itm.getSpriteId());
					//itm.moveSingle(tx, ty);
					itm.moveRoll(deg);
				}
			}
			
			return false;
		}

		@Override
		public void onShowPress(MotionEvent p1)
		{
			//Lg.i(TAG, "onShowPress");
		}
	}
	
	public GLController(Context ctx)
	{
		mContext = ctx;
		mGestureDetector = new GestureDetector(mContext, new GestureListener());
		mModels = new ArrayList<SpriteModel>();
		mTree = new TreeManager();
		ScreenModel.getInstance().setCallback(this);
	}

	public void onScreenChange(){
		boolean b = mTree.initialize(ScreenModel.getInstance().getScreenInfo());
		
		if(b){
			Iterator it = mModels.iterator();
			while(it.hasNext()){
				SpriteModel m = (SpriteModel)it.next();
				mTree.registModel(m);
			}
		}
	}
	
	public void addModelGroup(ModelGroup mg){
		mGroup = mg;
	}
	
	public void addModel(SpriteModel m)
	{
		mModels.add(m);
	}

	public void addModelList(List<SpriteModel> ml){
		mModels.addAll(ml);
	}
	
	public boolean onTouchEvent(MotionEvent event)
	{
		mGestureDetector.onTouchEvent(event);
		
		if(event.getAction() == MotionEvent.ACTION_DOWN)
		{
		} else if (event.getAction() == MotionEvent.ACTION_MOVE){
			
		} else if (event.getAction() == MotionEvent.ACTION_UP){
			mTree.refreshConllisionList(mDragItem);
			mIsDrag = false;
			mDragItem = null;
		}
		
		return true;
	}

	public void onUpdate()
	{
		if(mGroup.size() > 0) {
			Iterator it = mGroup.iterator();
			while(it.hasNext()){
				Item itm = (Item)it.next();
				itm.moveAnimation();
			}
		}
		
		/*
			if(mMoveType == 0){
			mRoad.scrollup(mDelta);
			
			} else {
			mDeg++;
			mRoad.roll(100f, mDeg);
			}
		*/
		//mLayer.update();
	}
}
