package com.fwgg8547.opentest;

import java.util.List;
import java.util.ArrayList;
import android.view.MotionEvent;
import android.graphics.*;
import java.util.*;
import android.content.*;
import android.view.*;
import android.view.GestureDetector.*;

public class GLController implements GlSurf.Callback
{
	private final static String TAG = "GLController";
	
	// Models
	private List<SpriteModel> mModels;
	private SpriteModel mEnemy;
	private SpriteModel mBoll;
	private ModelGroup mGroup;
	
	private boolean mIsDrag = false;
	private List<Item> mDragItem;
	private Context mContext;
	private GestureDetector mGestureDetector;

	public class GestureListener extends GestureDetector.SimpleOnGestureListener {
		public GestureListener(){			
		}

		@Override
		public boolean onDown(MotionEvent event)
		{
			Lg.i(TAG,"onDown");
			RectF screen = ScreenModel.getInstance().getScreenInfo();
			float tx = event.getX() ;
			float ty = screen.height() - event.getY();
			
			mDragItem = mBoll.getCollisionList(TreeManager.MAX_LEVEL, tx, ty);
			
			
			if(mDragItem != null &&  mDragItem.size() > 0){
				Lg.i(TAG, "cl " + mDragItem.size());
				Lg.i(TAG," down  "+tx+"|"+ty);
				
				mIsDrag = true;
			}

			/*
			 Iterator it = mModels.iterator();
			 while(it.hasNext()){
			 SpriteModel m = (SpriteModel)it.next();
			 if(m.conflict(tx, ty))
			 {
			 Lg.i(TAG, "hit");
			 int index = m.getIndexOfConflict();
			 }
			 }
			 */
			 
			return false;
		}

		@Override
		public boolean onFling(MotionEvent event1, MotionEvent event2, float vx, float vy)
		{
			Lg.i(TAG,"onFling " + vy);
			RectF screen = ScreenModel.getInstance().getScreenInfo();
			float ty1 = screen.height() - event1.getY();
			float ty2 = screen.height() - event2.getY();
			
			if(mIsDrag){
				//cslc vector
				Vec2 dirct = new Vec2(event2.getX() - event1.getX(), ty2 - ty1);
				
				float sz = Vec2.size(dirct);
				dirct.multiply(1.0f/sz);
				
				if(mDragItem != null ){
				Iterator it = mDragItem.iterator();
				while(it.hasNext()){
					Item itm = (Item)it.next();
					//Lg.i(TAG, "id " +itm.mId +" " +itm.getSpriteId());
					itm.setAnimParam(
						Item.AnimType.STRIGHT,
						0,// stop x
						0,// stop y
						0,// r
						0,// deg
						-1.0f*vy,// v
						120, // dur
						dirct 
						);
					//itm.moveAnimation2();
					itm.setAnimationValid(true);
				}
				}
			}
			/*
			Iterator it = mGroup.iterator();
			while(it.hasNext()){
				Item itm = (Item)it.next();
				//Lg.i(TAG, "id " +itm.mId +" " +itm.getSpriteId());
				Item.MoveParam mp = itm.getPosition();
				itm.setAnimParam(
					mp.mx, mp.my, mp.mr, mp.mdeg, // start
					mp.mx, mp.my, mp.mr, 360*10, // end
					vy, // verocity
					120 // duration
					);
			}
			*/
			return false;
		}

		@Override
		public boolean onSingleTapUp(MotionEvent p1)
		{
			//Lg.i(TAG, "onSingleTapUp");
			return false;
		}

		@Override
		public boolean onSingleTapConfirmed(MotionEvent e)
		{
			Lg.i(TAG, "onSingleTapConfirm");
			return super.onSingleTapConfirmed(e);
		}

		@Override
		public boolean onDoubleTapEvent(MotionEvent e)
		{
			// TODO: Implement this method
			//Lg.i(TAG, "onDoubleTapEvent");
			return super.onDoubleTapEvent(e);
		}

		@Override
		public boolean onDoubleTap(MotionEvent e)
		{
			// TODO: Implement this method
			Lg.i(TAG, "onDouleTap");
			return super.onDoubleTap(e);
		}

		@Override
		public void onLongPress(MotionEvent p1)
		{
			Lg.i(TAG,"onLongPress");
		}

		@Override
		public boolean onScroll(MotionEvent event1, MotionEvent event2, float dx, float dy)
		{
			/*
			//Lg.i(TAG, "onScroll " + p1.getY() + " ; " + p2.getY());
			RectF screen = ScreenModel.getInstance().getScreenInfo();
			float tx = event2.getX();
			float ty = screen.height() - event2.getY();
			
			if(mIsDrag){
				Iterator it = mDragItem.iterator();
				while(it.hasNext()){
					Item itm = (Item)it.next();
					//Lg.i(TAG, "id " +itm.mId +" " +itm.getSpriteId());
					//itm.moveSingle(tx, ty);
					itm.moveRoll(tx,ty);
				}
			}

			
			if(dy >= 0){
				float deg = -1.0f*dy/10.0f;
				Iterator it = mGroup.iterator();
				while(it.hasNext()){
					Item itm = (Item)it.next();
					//Lg.i(TAG, "id " +itm.mId +" " +itm.getSpriteId());
					//itm.moveSingle(tx, ty);
					
					itm.moveRoll(deg);
				}
			}
			*/
			return false;
		}

		@Override
		public void onShowPress(MotionEvent p1)
		{
			//Lg.i(TAG, "onShowPress");
		}
	}
	
	public GLController(Context ctx)
	{
		mContext = ctx;
		mGestureDetector = new GestureDetector(mContext, new GestureListener());
		mModels = new ArrayList<SpriteModel>();
	}
	
	public void addModelGroup(ModelGroup mg){
		mGroup = mg;
	}
	
/*	
	public void addModel(SpriteModel m)
	{
		mModels.add(m);
	}

	public void addModelList(List<SpriteModel> ml){
		mModels.addAll(ml);
	}
*/

	public void addEnemyModel(SpriteModel m) {
		mEnemy = m;
		mModels.add(m);
	}
	
	public void addBollModel(SpriteModel m) {
		mBoll = m;
		mModels.add(m);
	}
	
	public boolean onTouchEvent(MotionEvent event)
	{
		mGestureDetector.onTouchEvent(event);
		/*
		if (event.getAction() == MotionEvent.ACTION_UP){
			mBoll.refreshTree(mDragItem);
			mIsDrag = false;
			mDragItem = null;
		}
		*/
		return true;
	}

	public void onUpdate()
	{
		FpsController.mTestCounrt++;
		
		mEnemy.onUpdate();
		mBoll.onUpdate();
		collisionCheck();
		
	}
	
	private void collisionCheck(){
		List<Item> cl =  mEnemy.getCollisionList(mBoll);
		//Lg.i(TAG, "cl " + mDragItem.size());
		if(cl != null && cl.size() > 0){
			Lg.i(TAG, "hit !!!!!!! " ); //+ itm.mId+"|" + itm.getRect().left +"|"+ itm.getRect().top);
			Iterator it = cl.iterator();
			while(it.hasNext()){
				Item i = (Item)it.next();
				Lg.i(TAG, "itm " + i.mId);
				i.mIsDeleted = true;
			}
			
		}		
	}
}
