package com.fwgg8547.opentest;
import android.graphics.*;
import org.apache.http.*;
import android.text.*;

public class TreeManager
{
	private static final String TAG = "TreeManager";
	public static final int MAX_LEVEL = 4;
	private Cell[] mTree;
	private int[] mPow4;
	private int mCellNum;
	private RectF mScreen;
	private float mUnitW;
	private float mUnitH;
	
	public TreeManager(){
		
		mPow4 = new int[MAX_LEVEL+2];
		mPow4[0] = 1;
		int i;
		for(i = 1; i < MAX_LEVEL+2; i++){
			mPow4[i] = mPow4[i-1]*4;
		}
	}
	
	public void initialize(RectF screen){
		Lg.i(TAG, "i");
		mScreen = screen;
		mUnitH = mScreen.height()/(1<<MAX_LEVEL);
		mUnitW = mScreen.width()/(1<<MAX_LEVEL);
		mCellNum = (mPow4[MAX_LEVEL+1]-1)/3;
		mTree = new Cell[mCellNum];
		
		Lg.i(TAG, "cell num " + mCellNum);
		Lg.i(TAG, "unit w h " + mUnitW +";"+mUnitH) ;
	}
	
	public boolean register(Item item){
		RectF rect = item.getRect();
		int mnumLT = GetMortonNumber(rect.left, rect.top);
		int mnumRB = GetMortonNumber(rect.right, rect.bottom);
		
		Lg.i(TAG, "mnumLT " + mnumLT + " mnumRB "+ mnumRB);
		
		int def = mnumLT^mnumRB;
		int pl = 0;
		int i;
		for(i=0;i<MAX_LEVEL;i++){
			int check = (def>>(i*2)) & 0x03;
			if (check != 0){
				pl = i+1;
			}
		}
		
		int space = mnumRB >> (pl*2);
		int offset = (mPow4[MAX_LEVEL-pl]-1)/3;
		Lg.i(TAG, "space " + space +" offset " + offset);
		space += offset;
	
		if(mTree[space] == null){
			// create new cell
			mTree[space] = new Cell();
		} 
		
		item.mObjectTree.setCell(mTree[space]);
		mTree[space].add(item.mObjectTree);
		
		return false;
	}
	
	public Cell getCellByMnum(int level, int mnum){
		int index = (mPow4[level-1]-1)/3 + mnum;
		Lg.w(TAG, "l = " +level+" m = "+mnum+" inx = "+ index);
		return mTree[index];
	}
	
	public short BitSpeparate(short n){
		n = (short)((n | (n<<8)) & 0x00ff00ff);
		n = (short)((n | (n<<4)) & 0x0f0f0f0f);
		n = (short)((n | (n<<2)) & 0x33333333);
		return (short)((n | (n<<1)) & 0x55555555);
	}
	
	public short GetMortonNumber(float x, float y){
		short xnum = (short)(x/mUnitW);
		short ynum = (short)(y/mUnitH);
		return (short)(BitSpeparate(xnum) | (BitSpeparate(ynum)<<1));
	}
	
	
}


