package com.fwgg8547.opentest;
import android.graphics.*;
import org.apache.http.*;
import android.text.*;
import java.util.*;

public class TreeManager
{
	private static final String TAG = "TreeManager";
	public static final int MAX_LEVEL = 4;
	private Cell[] mTree;
	private int[] mPow4;
	private int mCellNum;
	private RectF mScreen;
	private float mUnitW;
	private float mUnitH;
	private boolean mIsInitialized;
	
	public TreeManager(){
		mIsInitialized = false;
		mPow4 = new int[MAX_LEVEL+2];
		mPow4[0] = 1;
		int i;
		for(i = 1; i < MAX_LEVEL+2; i++){
			mPow4[i] = mPow4[i-1]*4;
		}
		
		mCellNum = (mPow4[MAX_LEVEL+1]-1)/3;
		mTree = null; // new Cell[mCellNum];

		//Lg.i(TAG, "cell num " + mCellNum);
		//Lg.i(TAG, "unit w h " + mUnitW +";"+mUnitH);
		
	}
	
	public boolean initialize(RectF screen){
		if(mIsInitialized){
			return false;
		}
		mScreen = screen;
		mUnitH = mScreen.height()/(1<<MAX_LEVEL);
		mUnitW = mScreen.width()/(1<<MAX_LEVEL);
		Lg.i(TAG, "init unit w h "+mUnitW+"|"+mUnitH);
		mTree = new Cell[mCellNum];
		mIsInitialized = true;
		return true;
	}
	
	public void registModel(SpriteModel m){
		if(!mIsInitialized){
			return;
		}
		
		Iterator it = m.iterator();
		while(it.hasNext()){
			Item i = (Item)it.next();
			register(i);
		}
	}
	
	// l0:0 
	// l1:0 1 2 3 _5
	// l2:0 1 2 3 ... 15 _21
	// l3:0 1 2 3 ... 63 _85
	// l4:0 1 2 3 ... 255 
	// l5:0 1 2 3 ... 1023
	private boolean register(Item item){
		RectF rect = item.getRect();
		int mnumLT = GetMortonNumber(rect.left, rect.top);
		int mnumRB = GetMortonNumber(rect.right, rect.bottom);
		
		Lg.d(TAG, "l t r b "+rect.left+"|"+rect.top+"|"+rect.right+"|"+rect.bottom);
		Lg.d(TAG, "mnumLT " + mnumLT + " mnumRB "+ mnumRB);
		
		int def = mnumLT^mnumRB;
		int pl = 0;
		int i;
		for(i=0;i<MAX_LEVEL;i++){
			int check = (def>>(i*2)) & 0x03;
			if (check != 0){
				pl = i+1;
			}
		}
		
		
		int mnum = mnumLT >> (pl*2);
		int offset = (mPow4[MAX_LEVEL-pl]-1)/3;
		Lg.d(TAG, "id " + item.mId+"level " + (MAX_LEVEL-pl) + " mnum " + mnum +" offset " + offset
				 +"|" +rect.left+"|"+rect.top);
		int space = mnum + offset;
	
		if(mTree[space] == null){
			// create new cell
			mTree[space] = new Cell(space, (MAX_LEVEL-pl), mnum);
		} 
		
		if(item.getCell() == null){
			item.setCell(mTree[space]);
			mTree[space].add(item);
		} else {
			if(item.getCell().getId() != space)
			{
				unregister(item);
				item.setCell(mTree[space]);
				mTree[space].add(item);
			}
		}
		
		return false;
	}
	
	private void unregister(Item i){
		Lg.d(TAG, "unregist");
		Cell c =i.getCell();
		if(c != null) {
			c.remove(i);
		}
		i.setCell(null);
		
	}
	
	public void refreshTree(Item i){
		if(!mIsInitialized){
			return;
		}
		
		unregister(i);
		register(i);
	}
	
	public void refreshTree(List<Item> cl){
		if(!mIsInitialized){
			return;
		}
		
		Iterator it = cl.iterator();
		while(it.hasNext()){
			Item itm = (Item)it.next();
			Lg.d(TAG, "item id= "+itm.mId+" sid "+itm.getSpriteId());
			unregister(itm);
			register(itm);
		}
	}
	
	public List<Item> getCollisionList(int level, float x, float y){
		if(!mIsInitialized){
			return null;
		}
		
		int mnum = GetMortonNumber(x,y);
		Lg.d(TAG, "mnum = " + mnum +" l= "+level);
		
		List<Item> cl = getCollisionList(level, mnum);
		
		if(cl.size() > 0){
			Iterator it = cl.iterator();
			while(it.hasNext()){
				Item ot = (Item)it.next();
				boolean b = ot.getSprite().conflict(x,y);
				if(!b){
					it.remove();
				} 
			}
		}
		
		return cl;
	}

	public List<Item> getCollisionList(Item itm){
		if(!mIsInitialized){
			return null;
		}
		
		int mnum = itm.getCell().getMnum();
		int level = itm.getCell().getLevel();
		
		Lg.d(TAG, "mnum = " + mnum +" l= "+level);

		List<Item> cl = getCollisionList(level, mnum);

		if(cl.size() > 0){
			Iterator it = cl.iterator();
			while(it.hasNext()){
				Item i = (Item)it.next();
				if(i.mId == itm.mId){
					it.remove();
					continue;
				}
				boolean b = i.isCollision(itm.getRect());
				if(!b){
					it.remove();
				} 
			}
		}

		return cl;
	}
	
	public List<Item> getCollisionList(int level, int mnum){
		if(!mIsInitialized){
			return null;
		}
		
		ArrayList<Item> cl = new ArrayList<Item>();
		int i=0,p=0;
		
		Cell c = getCellByMnum(level, mnum);
		if ( c!= null ){
			
			List<Item> otl = c.getItemList();
			Lg.d(TAG, "level mnum  object = " +i+" "+p+" "+ otl.size());
			Iterator ite = otl.iterator();
			while(ite.hasNext()){
				Item ot = (Item)ite.next();
				cl.add(ot);
			}
		} 
		
		for(i=level-1; i>=0; i--){
			p = getParentMnum(mnum);
			c = getCellByMnum(i, p);
			if(c == null) {
				mnum = p;
				continue;
			} else {
				List<Item> otl = c.getItemList();
				Lg.d(TAG, "level mnum  object = " +i+" "+p+" "+ otl.size());
				Iterator ite = otl.iterator();
				while(ite.hasNext()){
					Item ot = (Item)ite.next();
					cl.add(ot);
				}
				mnum = p;
			}
		}
		
		return cl;
	}
		
	private Cell getCellByMnum(int level, int mnum){
		int index = (mPow4[level]-1)/3 + mnum;
		Lg.d(TAG, "l = " +level+" m = "+mnum+" inx = "+ index);
		return mTree[index];
	}
	
	private int getParentMnum(int mnum)	{
		/*
		Lg.i(TAG, "mnum "+mnum+" level "+level);
		Lg.i(TAG, "0 " +(mnum & 0b11));
		Lg.i(TAG, "2 " +((mnum >> 2) & 0b11));
		Lg.i(TAG, "4 " +((mnum >> 4) & 0b11));
		Lg.i(TAG, "6 " +((mnum >> 6) & 0b11));
		Lg.i(TAG, "8 " +((mnum >> 8) & 0b11));
		Lg.i(TAG, "10 " +((mnum >>10) & 0b11));
		*/
				
		int p = mnum>>2;
		Lg.d(TAG, "parent " + p);
		
		return p;
	}
	
	private short BitSpeparate(short n){
		n = (short)((n | (n<<8)) & 0x00ff00ff);
		n = (short)((n | (n<<4)) & 0x0f0f0f0f);
		n = (short)((n | (n<<2)) & 0x33333333);
		return (short)((n | (n<<1)) & 0x55555555);
	}
	
	private short GetMortonNumber(float x, float y){
		short xnum = (short)(x/mUnitW);
		
		short ynum = (short)(y/mUnitH);
		return (short)(BitSpeparate(xnum) | (BitSpeparate(ynum)<<1));
	}
	
	
}


