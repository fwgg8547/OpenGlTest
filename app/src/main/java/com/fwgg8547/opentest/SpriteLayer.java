package com.fwgg8547.opentest;

import android.opengl.*;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.ShortBuffer;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.content.*;

public class SpriteLayer implements OpenglLayer
{
	private static final String TAG = "SpriteLayer";
	private static final int MAX_OBJECT = 10;
	private SpriteModel mModel;
	private int mIndexCount;
	private Context mContext;
	
	public FloatBuffer mVertexBuffer;
	public ShortBuffer mDrawListBuffer;
	public FloatBuffer mUvBuffer;
	
	public SpriteLayer(Context ctx){
		mIndexCount = 0;
		mContext = ctx;
		mModel = BlockModel.getInstance();
	}

	@Override
	public void setModels(SpriteModel model)
	{
		mModel = model;
	}
	
	@Override
	public void setupPoints()
	{
		float[] a = mModel.getVert(MAX_OBJECT);
		short[] b = mModel.getIndex(MAX_OBJECT);
		float[] uvs = mModel.getUvs();
		
		// The vertex buffer.
		ByteBuffer bb = ByteBuffer.allocateDirect(a.length * 4);
		bb.order(ByteOrder.nativeOrder());
		mVertexBuffer = bb.asFloatBuffer();
		mVertexBuffer.put(a);
		mVertexBuffer.position(0);

		// initialize byte buffer for the draw list
		ByteBuffer dlb = ByteBuffer.allocateDirect(b.length * 2);
		dlb.order(ByteOrder.nativeOrder());
		mDrawListBuffer = dlb.asShortBuffer();
		mDrawListBuffer.put(b);
		mDrawListBuffer.position(0);

	  mIndexCount = mModel.getIndexCount();
		
		// The texture buffer
		ByteBuffer bbuv = ByteBuffer.allocateDirect(uvs.length * 4);
		bbuv.order(ByteOrder.nativeOrder());
		mUvBuffer = bbuv.asFloatBuffer();
		mUvBuffer.put(uvs);
		mUvBuffer.position(0);
		
	}

	@Override
	public void setupTexture(int id, int name)
	{
		
		Bitmap bmp = BitmapFactory.decodeResource(mContext.getResources(), R.drawable.ic_launcher);//id);

		// Bind texture to texturename
		GLES20.glActiveTexture(id);
		GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, name);

		// Set filtering
		GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, 
													 GLES20.GL_LINEAR);
		GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, 
													 GLES20.GL_LINEAR);

		// Set wrapping mode
		GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, 
													 GLES20.GL_CLAMP_TO_EDGE);
		GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, 
													 GLES20.GL_CLAMP_TO_EDGE);

		// Load the bitmap into the bound texture.
		GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bmp, 0);

		// We are done using the bitmap so we should recycle it.
		bmp.recycle();
		
	}

	@Override
	public void update()
	{
		setupPoints();
	}

	@Override
	public void draw(float[] projectionAndview)
	{
		// Set our shaderprogram to image shader
		GLES20.glUseProgram(riGraphicTools.sp_Image);

		// clear Screen and Depth Buffer, 
		// we have set the clear color as black.
		GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);

		// get handle to vertex shader's vPosition member
		int mPositionHandle = 
			GLES20.glGetAttribLocation(riGraphicTools.sp_Image, "vPosition");

		// Enable generic vertex attribute array
		GLES20.glEnableVertexAttribArray(mPositionHandle);

		// Prepare the triangle coordinate data
		GLES20.glVertexAttribPointer(mPositionHandle, 3,
                                 GLES20.GL_FLOAT, false,
                                 0, mVertexBuffer);

		// Get handle to texture coordinates location
		int mTexCoordLoc = GLES20.glGetAttribLocation(riGraphicTools.sp_Image, 
																									"a_texCoord" );

		// Enable generic vertex attribute array
		GLES20.glEnableVertexAttribArray ( mTexCoordLoc );

		// Prepare the texturecoordinates
		GLES20.glVertexAttribPointer ( mTexCoordLoc, 2, GLES20.GL_FLOAT,
																	false,
																	0, mUvBuffer);

		// Get handle to shape's transformation matrix
		int mtrxhandle = GLES20.glGetUniformLocation(riGraphicTools.sp_Image, 
																								 "uMVPMatrix");

		// Apply the projection and view transformation
		GLES20.glUniformMatrix4fv(mtrxhandle, 1, false, projectionAndview, 0);

		// Get handle to textures locations
		int mSamplerLoc = GLES20.glGetUniformLocation (riGraphicTools.sp_Image, 
																									 "s_texture" );

		// Set the sampler texture unit to 0, where we have saved the texture.
		GLES20.glUniform1i ( mSamplerLoc, 0);

		GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA, GLES20.GL_ONE_MINUS_SRC_ALPHA);
		GLES20.glEnable(GLES20.GL_BLEND);

		// Draw the triangle

		GLES20.glDrawElements(GLES20.GL_TRIANGLES, mIndexCount,
													GLES20.GL_UNSIGNED_SHORT, mDrawListBuffer);

		// Disable vertex array
		GLES20.glDisableVertexAttribArray(mPositionHandle);
		GLES20.glDisableVertexAttribArray(mTexCoordLoc);
		
	}

}
